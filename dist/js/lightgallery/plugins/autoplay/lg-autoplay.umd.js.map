{"version":3,"names":[],"mappings":"","sources":["lightgallery/plugins/autoplay/lg-autoplay.umd.js"],"sourcesContent":["/*!\n * lightgallery | 2.7.2 | September 20th 2023\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.lgAutoplay = factory());\n}(this, (function () { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    /**\r\n     * List of lightGallery events\r\n     * All events should be documented here\r\n     * Below interfaces are used to build the website documentations\r\n     * */\r\n    var lGEvents = {\r\n        afterAppendSlide: 'lgAfterAppendSlide',\r\n        init: 'lgInit',\r\n        hasVideo: 'lgHasVideo',\r\n        containerResize: 'lgContainerResize',\r\n        updateSlides: 'lgUpdateSlides',\r\n        afterAppendSubHtml: 'lgAfterAppendSubHtml',\r\n        beforeOpen: 'lgBeforeOpen',\r\n        afterOpen: 'lgAfterOpen',\r\n        slideItemLoad: 'lgSlideItemLoad',\r\n        beforeSlide: 'lgBeforeSlide',\r\n        afterSlide: 'lgAfterSlide',\r\n        posterClick: 'lgPosterClick',\r\n        dragStart: 'lgDragStart',\r\n        dragMove: 'lgDragMove',\r\n        dragEnd: 'lgDragEnd',\r\n        beforeNextSlide: 'lgBeforeNextSlide',\r\n        beforePrevSlide: 'lgBeforePrevSlide',\r\n        beforeClose: 'lgBeforeClose',\r\n        afterClose: 'lgAfterClose',\r\n        rotateLeft: 'lgRotateLeft',\r\n        rotateRight: 'lgRotateRight',\r\n        flipHorizontal: 'lgFlipHorizontal',\r\n        flipVertical: 'lgFlipVertical',\r\n        autoplay: 'lgAutoplay',\r\n        autoplayStart: 'lgAutoplayStart',\r\n        autoplayStop: 'lgAutoplayStop',\r\n    };\n\n    var autoplaySettings = {\r\n        autoplay: true,\r\n        slideShowAutoplay: false,\r\n        slideShowInterval: 5000,\r\n        progressBar: true,\r\n        forceSlideShowAutoplay: false,\r\n        autoplayControls: true,\r\n        appendAutoplayControlsTo: '.lg-toolbar',\r\n        autoplayPluginStrings: {\r\n            toggleAutoplay: 'Toggle Autoplay',\r\n        },\r\n    };\n\n    /**\r\n     * Creates the autoplay plugin.\r\n     * @param {object} element - lightGallery element\r\n     */\r\n    var Autoplay = /** @class */ (function () {\r\n        function Autoplay(instance) {\r\n            this.core = instance;\r\n            // extend module default settings with lightGallery core settings\r\n            this.settings = __assign(__assign({}, autoplaySettings), this.core.settings);\r\n            return this;\r\n        }\r\n        Autoplay.prototype.init = function () {\r\n            var _this = this;\r\n            if (!this.settings.autoplay) {\r\n                return;\r\n            }\r\n            this.interval = false;\r\n            // Identify if slide happened from autoplay\r\n            this.fromAuto = true;\r\n            // Identify if autoplay canceled from touch/drag\r\n            this.pausedOnTouchDrag = false;\r\n            this.pausedOnSlideChange = false;\r\n            // append autoplay controls\r\n            if (this.settings.autoplayControls) {\r\n                this.controls();\r\n            }\r\n            // Create progress bar\r\n            if (this.settings.progressBar) {\r\n                this.core.outer.append('<div class=\"lg-progress-bar\"><div class=\"lg-progress\"></div></div>');\r\n            }\r\n            // Start autoplay\r\n            if (this.settings.slideShowAutoplay) {\r\n                this.core.LGel.once(lGEvents.slideItemLoad + \".autoplay\", function () {\r\n                    _this.startAutoPlay();\r\n                });\r\n            }\r\n            // cancel interval on touchstart and dragstart\r\n            this.core.LGel.on(lGEvents.dragStart + \".autoplay touchstart.lg.autoplay\", function () {\r\n                if (_this.interval) {\r\n                    _this.stopAutoPlay();\r\n                    _this.pausedOnTouchDrag = true;\r\n                }\r\n            });\r\n            // restore autoplay if autoplay canceled from touchstart / dragstart\r\n            this.core.LGel.on(lGEvents.dragEnd + \".autoplay touchend.lg.autoplay\", function () {\r\n                if (!_this.interval && _this.pausedOnTouchDrag) {\r\n                    _this.startAutoPlay();\r\n                    _this.pausedOnTouchDrag = false;\r\n                }\r\n            });\r\n            this.core.LGel.on(lGEvents.beforeSlide + \".autoplay\", function () {\r\n                _this.showProgressBar();\r\n                if (!_this.fromAuto && _this.interval) {\r\n                    _this.stopAutoPlay();\r\n                    _this.pausedOnSlideChange = true;\r\n                }\r\n                else {\r\n                    _this.pausedOnSlideChange = false;\r\n                }\r\n                _this.fromAuto = false;\r\n            });\r\n            // restore autoplay if autoplay canceled from touchstart / dragstart\r\n            this.core.LGel.on(lGEvents.afterSlide + \".autoplay\", function () {\r\n                if (_this.pausedOnSlideChange &&\r\n                    !_this.interval &&\r\n                    _this.settings.forceSlideShowAutoplay) {\r\n                    _this.startAutoPlay();\r\n                    _this.pausedOnSlideChange = false;\r\n                }\r\n            });\r\n            // set progress\r\n            this.showProgressBar();\r\n        };\r\n        Autoplay.prototype.showProgressBar = function () {\r\n            var _this = this;\r\n            if (this.settings.progressBar && this.fromAuto) {\r\n                var _$progressBar_1 = this.core.outer.find('.lg-progress-bar');\r\n                var _$progress_1 = this.core.outer.find('.lg-progress');\r\n                if (this.interval) {\r\n                    _$progress_1.removeAttr('style');\r\n                    _$progressBar_1.removeClass('lg-start');\r\n                    setTimeout(function () {\r\n                        _$progress_1.css('transition', 'width ' +\r\n                            (_this.core.settings.speed +\r\n                                _this.settings.slideShowInterval) +\r\n                            'ms ease 0s');\r\n                        _$progressBar_1.addClass('lg-start');\r\n                    }, 20);\r\n                }\r\n            }\r\n        };\r\n        // Manage autoplay via play/stop buttons\r\n        Autoplay.prototype.controls = function () {\r\n            var _this = this;\r\n            var _html = \"<button aria-label=\\\"\" + this.settings.autoplayPluginStrings['toggleAutoplay'] + \"\\\" type=\\\"button\\\" class=\\\"lg-autoplay-button lg-icon\\\"></button>\";\r\n            // Append autoplay controls\r\n            this.core.outer\r\n                .find(this.settings.appendAutoplayControlsTo)\r\n                .append(_html);\r\n            this.core.outer\r\n                .find('.lg-autoplay-button')\r\n                .first()\r\n                .on('click.lg.autoplay', function () {\r\n                if (_this.core.outer.hasClass('lg-show-autoplay')) {\r\n                    _this.stopAutoPlay();\r\n                }\r\n                else {\r\n                    if (!_this.interval) {\r\n                        _this.startAutoPlay();\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        // Autostart gallery\r\n        Autoplay.prototype.startAutoPlay = function () {\r\n            var _this = this;\r\n            this.core.outer\r\n                .find('.lg-progress')\r\n                .css('transition', 'width ' +\r\n                (this.core.settings.speed +\r\n                    this.settings.slideShowInterval) +\r\n                'ms ease 0s');\r\n            this.core.outer.addClass('lg-show-autoplay');\r\n            this.core.outer.find('.lg-progress-bar').addClass('lg-start');\r\n            this.core.LGel.trigger(lGEvents.autoplayStart, {\r\n                index: this.core.index,\r\n            });\r\n            this.interval = setInterval(function () {\r\n                if (_this.core.index + 1 < _this.core.galleryItems.length) {\r\n                    _this.core.index++;\r\n                }\r\n                else {\r\n                    _this.core.index = 0;\r\n                }\r\n                _this.core.LGel.trigger(lGEvents.autoplay, {\r\n                    index: _this.core.index,\r\n                });\r\n                _this.fromAuto = true;\r\n                _this.core.slide(_this.core.index, false, false, 'next');\r\n            }, this.core.settings.speed + this.settings.slideShowInterval);\r\n        };\r\n        // cancel Autostart\r\n        Autoplay.prototype.stopAutoPlay = function () {\r\n            if (this.interval) {\r\n                this.core.LGel.trigger(lGEvents.autoplayStop, {\r\n                    index: this.core.index,\r\n                });\r\n                this.core.outer.find('.lg-progress').removeAttr('style');\r\n                this.core.outer.removeClass('lg-show-autoplay');\r\n                this.core.outer.find('.lg-progress-bar').removeClass('lg-start');\r\n            }\r\n            clearInterval(this.interval);\r\n            this.interval = false;\r\n        };\r\n        Autoplay.prototype.closeGallery = function () {\r\n            this.stopAutoPlay();\r\n        };\r\n        Autoplay.prototype.destroy = function () {\r\n            if (this.settings.autoplay) {\r\n                this.core.outer.find('.lg-progress-bar').remove();\r\n            }\r\n            // Remove all event listeners added by autoplay plugin\r\n            this.core.LGel.off('.lg.autoplay');\r\n            this.core.LGel.off('.autoplay');\r\n        };\r\n        return Autoplay;\r\n    }());\n\n    return Autoplay;\n\n})));\n\n"],"file":"lightgallery/plugins/autoplay/lg-autoplay.umd.js"}