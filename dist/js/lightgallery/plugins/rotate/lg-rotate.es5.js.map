{"version":3,"names":[],"mappings":"","sources":["lightgallery/plugins/rotate/lg-rotate.es5.js"],"sourcesContent":["/*!\n * lightgallery | 2.7.2 | September 20th 2023\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\n/**\r\n * List of lightGallery events\r\n * All events should be documented here\r\n * Below interfaces are used to build the website documentations\r\n * */\r\nvar lGEvents = {\r\n    afterAppendSlide: 'lgAfterAppendSlide',\r\n    init: 'lgInit',\r\n    hasVideo: 'lgHasVideo',\r\n    containerResize: 'lgContainerResize',\r\n    updateSlides: 'lgUpdateSlides',\r\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\r\n    beforeOpen: 'lgBeforeOpen',\r\n    afterOpen: 'lgAfterOpen',\r\n    slideItemLoad: 'lgSlideItemLoad',\r\n    beforeSlide: 'lgBeforeSlide',\r\n    afterSlide: 'lgAfterSlide',\r\n    posterClick: 'lgPosterClick',\r\n    dragStart: 'lgDragStart',\r\n    dragMove: 'lgDragMove',\r\n    dragEnd: 'lgDragEnd',\r\n    beforeNextSlide: 'lgBeforeNextSlide',\r\n    beforePrevSlide: 'lgBeforePrevSlide',\r\n    beforeClose: 'lgBeforeClose',\r\n    afterClose: 'lgAfterClose',\r\n    rotateLeft: 'lgRotateLeft',\r\n    rotateRight: 'lgRotateRight',\r\n    flipHorizontal: 'lgFlipHorizontal',\r\n    flipVertical: 'lgFlipVertical',\r\n    autoplay: 'lgAutoplay',\r\n    autoplayStart: 'lgAutoplayStart',\r\n    autoplayStop: 'lgAutoplayStop',\r\n};\n\nvar rotateSettings = {\r\n    rotate: true,\r\n    rotateSpeed: 400,\r\n    rotateLeft: true,\r\n    rotateRight: true,\r\n    flipHorizontal: true,\r\n    flipVertical: true,\r\n    rotatePluginStrings: {\r\n        flipVertical: 'Flip vertical',\r\n        flipHorizontal: 'Flip horizontal',\r\n        rotateLeft: 'Rotate left',\r\n        rotateRight: 'Rotate right',\r\n    },\r\n};\n\nvar Rotate = /** @class */ (function () {\r\n    function Rotate(instance, $LG) {\r\n        // get lightGallery core plugin instance\r\n        this.core = instance;\r\n        this.$LG = $LG;\r\n        // extend module default settings with lightGallery core settings\r\n        this.settings = __assign(__assign({}, rotateSettings), this.core.settings);\r\n        return this;\r\n    }\r\n    Rotate.prototype.buildTemplates = function () {\r\n        var rotateIcons = '';\r\n        if (this.settings.flipVertical) {\r\n            rotateIcons += \"<button type=\\\"button\\\" id=\\\"lg-flip-ver\\\" aria-label=\\\"\" + this.settings.rotatePluginStrings['flipVertical'] + \"\\\" class=\\\"lg-flip-ver lg-icon\\\"></button>\";\r\n        }\r\n        if (this.settings.flipHorizontal) {\r\n            rotateIcons += \"<button type=\\\"button\\\" id=\\\"lg-flip-hor\\\" aria-label=\\\"\" + this.settings.rotatePluginStrings['flipHorizontal'] + \"\\\" class=\\\"lg-flip-hor lg-icon\\\"></button>\";\r\n        }\r\n        if (this.settings.rotateLeft) {\r\n            rotateIcons += \"<button type=\\\"button\\\" id=\\\"lg-rotate-left\\\" aria-label=\\\"\" + this.settings.rotatePluginStrings['rotateLeft'] + \"\\\" class=\\\"lg-rotate-left lg-icon\\\"></button>\";\r\n        }\r\n        if (this.settings.rotateRight) {\r\n            rotateIcons += \"<button type=\\\"button\\\" id=\\\"lg-rotate-right\\\" aria-label=\\\"\" + this.settings.rotatePluginStrings['rotateRight'] + \"\\\" class=\\\"lg-rotate-right lg-icon\\\"></button>\";\r\n        }\r\n        this.core.$toolbar.append(rotateIcons);\r\n    };\r\n    Rotate.prototype.init = function () {\r\n        var _this = this;\r\n        if (!this.settings.rotate) {\r\n            return;\r\n        }\r\n        this.buildTemplates();\r\n        // Save rotate config for each item to persist its rotate, flip values\r\n        // even after navigating to diferent slides\r\n        this.rotateValuesList = {};\r\n        // event triggered after appending slide content\r\n        this.core.LGel.on(lGEvents.slideItemLoad + \".rotate\", function (event) {\r\n            var index = event.detail.index;\r\n            var rotateEl = _this.core\r\n                .getSlideItem(index)\r\n                .find('.lg-img-rotate')\r\n                .get();\r\n            if (!rotateEl) {\r\n                var imageWrap = _this.core\r\n                    .getSlideItem(index)\r\n                    .find('.lg-object')\r\n                    .first();\r\n                imageWrap.wrap('lg-img-rotate');\r\n                //this.rotateValuesList[this.core.index]\r\n                _this.core\r\n                    .getSlideItem(_this.core.index)\r\n                    .find('.lg-img-rotate')\r\n                    .css('transition-duration', _this.settings.rotateSpeed + 'ms');\r\n            }\r\n        });\r\n        this.core.outer\r\n            .find('#lg-rotate-left')\r\n            .first()\r\n            .on('click.lg', this.rotateLeft.bind(this));\r\n        this.core.outer\r\n            .find('#lg-rotate-right')\r\n            .first()\r\n            .on('click.lg', this.rotateRight.bind(this));\r\n        this.core.outer\r\n            .find('#lg-flip-hor')\r\n            .first()\r\n            .on('click.lg', this.flipHorizontal.bind(this));\r\n        this.core.outer\r\n            .find('#lg-flip-ver')\r\n            .first()\r\n            .on('click.lg', this.flipVertical.bind(this));\r\n        // Reset rotate on slide change\r\n        this.core.LGel.on(lGEvents.beforeSlide + \".rotate\", function (event) {\r\n            if (!_this.rotateValuesList[event.detail.index]) {\r\n                _this.rotateValuesList[event.detail.index] = {\r\n                    rotate: 0,\r\n                    flipHorizontal: 1,\r\n                    flipVertical: 1,\r\n                };\r\n            }\r\n        });\r\n    };\r\n    Rotate.prototype.applyStyles = function () {\r\n        var $image = this.core\r\n            .getSlideItem(this.core.index)\r\n            .find('.lg-img-rotate')\r\n            .first();\r\n        $image.css('transform', 'rotate(' +\r\n            this.rotateValuesList[this.core.index].rotate +\r\n            'deg)' +\r\n            ' scale3d(' +\r\n            this.rotateValuesList[this.core.index].flipHorizontal +\r\n            ', ' +\r\n            this.rotateValuesList[this.core.index].flipVertical +\r\n            ', 1)');\r\n    };\r\n    Rotate.prototype.rotateLeft = function () {\r\n        this.rotateValuesList[this.core.index].rotate -= 90;\r\n        this.applyStyles();\r\n        this.triggerEvents(lGEvents.rotateLeft, {\r\n            rotate: this.rotateValuesList[this.core.index].rotate,\r\n        });\r\n    };\r\n    Rotate.prototype.rotateRight = function () {\r\n        this.rotateValuesList[this.core.index].rotate += 90;\r\n        this.applyStyles();\r\n        this.triggerEvents(lGEvents.rotateRight, {\r\n            rotate: this.rotateValuesList[this.core.index].rotate,\r\n        });\r\n    };\r\n    Rotate.prototype.getCurrentRotation = function (el) {\r\n        if (!el) {\r\n            return 0;\r\n        }\r\n        var st = this.$LG(el).style();\r\n        var tm = st.getPropertyValue('-webkit-transform') ||\r\n            st.getPropertyValue('-moz-transform') ||\r\n            st.getPropertyValue('-ms-transform') ||\r\n            st.getPropertyValue('-o-transform') ||\r\n            st.getPropertyValue('transform') ||\r\n            'none';\r\n        if (tm !== 'none') {\r\n            var values = tm.split('(')[1].split(')')[0].split(',');\r\n            if (values) {\r\n                var angle = Math.round(Math.atan2(values[1], values[0]) * (180 / Math.PI));\r\n                return angle < 0 ? angle + 360 : angle;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    Rotate.prototype.flipHorizontal = function () {\r\n        var rotateEl = this.core\r\n            .getSlideItem(this.core.index)\r\n            .find('.lg-img-rotate')\r\n            .first()\r\n            .get();\r\n        var currentRotation = this.getCurrentRotation(rotateEl);\r\n        var rotateAxis = 'flipHorizontal';\r\n        if (currentRotation === 90 || currentRotation === 270) {\r\n            rotateAxis = 'flipVertical';\r\n        }\r\n        this.rotateValuesList[this.core.index][rotateAxis] *= -1;\r\n        this.applyStyles();\r\n        this.triggerEvents(lGEvents.flipHorizontal, {\r\n            flipHorizontal: this.rotateValuesList[this.core.index][rotateAxis],\r\n        });\r\n    };\r\n    Rotate.prototype.flipVertical = function () {\r\n        var rotateEl = this.core\r\n            .getSlideItem(this.core.index)\r\n            .find('.lg-img-rotate')\r\n            .first()\r\n            .get();\r\n        var currentRotation = this.getCurrentRotation(rotateEl);\r\n        var rotateAxis = 'flipVertical';\r\n        if (currentRotation === 90 || currentRotation === 270) {\r\n            rotateAxis = 'flipHorizontal';\r\n        }\r\n        this.rotateValuesList[this.core.index][rotateAxis] *= -1;\r\n        this.applyStyles();\r\n        this.triggerEvents(lGEvents.flipVertical, {\r\n            flipVertical: this.rotateValuesList[this.core.index][rotateAxis],\r\n        });\r\n    };\r\n    Rotate.prototype.triggerEvents = function (event, detail) {\r\n        var _this = this;\r\n        setTimeout(function () {\r\n            _this.core.LGel.trigger(event, detail);\r\n        }, this.settings.rotateSpeed + 10);\r\n    };\r\n    Rotate.prototype.isImageOrientationChanged = function () {\r\n        var rotateValue = this.rotateValuesList[this.core.index];\r\n        var isRotated = Math.abs(rotateValue.rotate) % 360 !== 0;\r\n        var ifFlippedHor = rotateValue.flipHorizontal < 0;\r\n        var ifFlippedVer = rotateValue.flipVertical < 0;\r\n        return isRotated || ifFlippedHor || ifFlippedVer;\r\n    };\r\n    Rotate.prototype.closeGallery = function () {\r\n        if (this.isImageOrientationChanged()) {\r\n            this.core.getSlideItem(this.core.index).css('opacity', 0);\r\n        }\r\n        this.rotateValuesList = {};\r\n    };\r\n    Rotate.prototype.destroy = function () {\r\n        // Unbind all events added by lightGallery rotate plugin\r\n        this.core.LGel.off('.lg.rotate');\r\n        this.core.LGel.off('.rotate');\r\n    };\r\n    return Rotate;\r\n}());\n\nexport default Rotate;\n\n"],"file":"lightgallery/plugins/rotate/lg-rotate.es5.js"}